def PROJECT_PATH = 'domainless/hello-world'
def APP_NAME = 'hello-world'

pipeline {
    agent any

    stages {
        stage('Application: Maven Build') {
            agent {
                docker {
                    image 'maven:3.9.4-eclipse-temurin-17-alpine'
                    args '-u root'
                }
            }
            steps {
                dir(PROJECT_PATH) {
                    sh 'mvn --no-transfer-progress clean install'
                }
            }
        }
        stage('Docker Image: Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_ACCESS_TOKEN')]) {
                    script {
                        def IMAGE_TAG = new Date().format("yyyy-MM-dd-HHmmss")

                        def IMAGE_NAME = "${DOCKER_USERNAME}/${APP_NAME}"

                        env.IMAGE_LATEST_NAME = "${IMAGE_NAME}:latest"
                        env.IMAGE_FULL_NAME = "${IMAGE_NAME}:${IMAGE_TAG}"
                        echo "Image Full Name is: ${env.IMAGE_FULL_NAME}"

                        def DOCKERFILE_PATH = "${PROJECT_PATH}/ci-cd/Dockerfile"

                        sh "echo -n '${DOCKER_ACCESS_TOKEN}' | docker login -u ${DOCKER_USERNAME} --password-stdin"

                        sh """
                            docker buildx inspect --bootstrap
                            docker buildx build --platform linux/amd64,linux/arm64 --push -t ${env.IMAGE_FULL_NAME} -t ${env.IMAGE_LATEST_NAME} -f ${DOCKERFILE_PATH} ${PROJECT_PATH}
                        """
                    }
                }
            }
        }
        stage('Kubernetes: Deploy') {
            agent {
                docker {
                    image 'oprokipchuk/backend-sandbox-cicd'
                    args '-u root'
                    alwaysPull true
                }
            }
            steps {
                script {
                    def K8S_FILE_PATH = "${PROJECT_PATH}/ci-cd/k8s.yml"

                    sh "aws eks update-kubeconfig --name ${env.EKS_CLUSTER_NAME} --region ${env.AWS_REGION}"
                    sh """
                        sed -i "s|${env.IMAGE_LATEST_NAME}|${env.IMAGE_FULL_NAME}|" ${K8S_FILE_PATH}
                        kubectl apply -f ${K8S_FILE_PATH}
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Doing Cleanup'
                if (env.IMAGE_FULL_NAME) {
                    sh "docker image rm -f ${env.IMAGE_FULL_NAME}"
                }

                // Clean caches
                sh """
                    docker builder prune -f
                    docker buildx prune -f
                """
            }
        }

        success {
            echo 'Build successful!'
        }

        failure {
            echo 'Build failed!'
        }
    }
}
